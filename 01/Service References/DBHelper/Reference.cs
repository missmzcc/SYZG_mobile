//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace _01.DBHelper {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DBHelper.IDBHelper")]
    public interface IDBHelper {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteSql", ReplyAction="http://tempuri.org/IDBHelper/YExecuteSqlResponse")]
        string YExecuteSql(string userid, System.DateTime starttime, System.DateTime endtime, string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteSql", ReplyAction="http://tempuri.org/IDBHelper/YExecuteSqlResponse")]
        System.Threading.Tasks.Task<string> YExecuteSqlAsync(string userid, System.DateTime starttime, System.DateTime endtime, string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteHis", ReplyAction="http://tempuri.org/IDBHelper/YExecuteHisResponse")]
        string YExecuteHis(string userid, System.DateTime starttime, System.DateTime endtime, string sim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteHis", ReplyAction="http://tempuri.org/IDBHelper/YExecuteHisResponse")]
        System.Threading.Tasks.Task<string> YExecuteHisAsync(string userid, System.DateTime starttime, System.DateTime endtime, string sim);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteDBExits", ReplyAction="http://tempuri.org/IDBHelper/YExecuteDBExitsResponse")]
        string YExecuteDBExits(System.DateTime monthtime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteDBExits", ReplyAction="http://tempuri.org/IDBHelper/YExecuteDBExitsResponse")]
        System.Threading.Tasks.Task<string> YExecuteDBExitsAsync(System.DateTime monthtime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteReportSql", ReplyAction="http://tempuri.org/IDBHelper/YExecuteReportSqlResponse")]
        string YExecuteReportSql(string userid, System.DateTime starttime, System.DateTime endtime, string sql, string isGeo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/YExecuteReportSql", ReplyAction="http://tempuri.org/IDBHelper/YExecuteReportSqlResponse")]
        System.Threading.Tasks.Task<string> YExecuteReportSqlAsync(string userid, System.DateTime starttime, System.DateTime endtime, string sql, string isGeo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexecuteProc", ReplyAction="http://tempuri.org/IDBHelper/BexecuteProcResponse")]
        string BexecuteProc(string userid, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexecuteProc", ReplyAction="http://tempuri.org/IDBHelper/BexecuteProcResponse")]
        System.Threading.Tasks.Task<string> BexecuteProcAsync(string userid, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexecuteProcNoPara", ReplyAction="http://tempuri.org/IDBHelper/BexecuteProcNoParaResponse")]
        string BexecuteProcNoPara(string userid, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexecuteProcNoPara", ReplyAction="http://tempuri.org/IDBHelper/BexecuteProcNoParaResponse")]
        System.Threading.Tasks.Task<string> BexecuteProcNoParaAsync(string userid, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexecuteProcWithBackPara", ReplyAction="http://tempuri.org/IDBHelper/BexecuteProcWithBackParaResponse")]
        string BexecuteProcWithBackPara(string userid, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexecuteProcWithBackPara", ReplyAction="http://tempuri.org/IDBHelper/BexecuteProcWithBackParaResponse")]
        System.Threading.Tasks.Task<string> BexecuteProcWithBackParaAsync(string userid, string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BInsertTransDetailProc", ReplyAction="http://tempuri.org/IDBHelper/BInsertTransDetailProcResponse")]
        string BInsertTransDetailProc(string userid, string procName, string xmlStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BInsertTransDetailProc", ReplyAction="http://tempuri.org/IDBHelper/BInsertTransDetailProcResponse")]
        System.Threading.Tasks.Task<string> BInsertTransDetailProcAsync(string userid, string procName, string xmlStr);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/testGetTableProc", ReplyAction="http://tempuri.org/IDBHelper/testGetTableProcResponse")]
        string testGetTableProc();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/testGetTableProc", ReplyAction="http://tempuri.org/IDBHelper/testGetTableProcResponse")]
        System.Threading.Tasks.Task<string> testGetTableProcAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexcuteSql", ReplyAction="http://tempuri.org/IDBHelper/BexcuteSqlResponse")]
        string BexcuteSql(string userid, string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BexcuteSql", ReplyAction="http://tempuri.org/IDBHelper/BexcuteSqlResponse")]
        System.Threading.Tasks.Task<string> BexcuteSqlAsync(string userid, string sql);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BgetAllVehicleWithRight", ReplyAction="http://tempuri.org/IDBHelper/BgetAllVehicleWithRightResponse")]
        string BgetAllVehicleWithRight(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BgetAllVehicleWithRight", ReplyAction="http://tempuri.org/IDBHelper/BgetAllVehicleWithRightResponse")]
        System.Threading.Tasks.Task<string> BgetAllVehicleWithRightAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BgetTreeVehicleWithRight", ReplyAction="http://tempuri.org/IDBHelper/BgetTreeVehicleWithRightResponse")]
        string BgetTreeVehicleWithRight(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BgetTreeVehicleWithRight", ReplyAction="http://tempuri.org/IDBHelper/BgetTreeVehicleWithRightResponse")]
        System.Threading.Tasks.Task<string> BgetTreeVehicleWithRightAsync(string userid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BInsertIntoMsgGroup", ReplyAction="http://tempuri.org/IDBHelper/BInsertIntoMsgGroupResponse")]
        string BInsertIntoMsgGroup(string GroupNum_In, string GroupName_In, string GroupFounder_In, string FMemo_In);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/BInsertIntoMsgGroup", ReplyAction="http://tempuri.org/IDBHelper/BInsertIntoMsgGroupResponse")]
        System.Threading.Tasks.Task<string> BInsertIntoMsgGroupAsync(string GroupNum_In, string GroupName_In, string GroupFounder_In, string FMemo_In);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/GgpsTranslate2Baidu", ReplyAction="http://tempuri.org/IDBHelper/GgpsTranslate2BaiduResponse")]
        string GgpsTranslate2Baidu(string lng, string lat, string flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/GgpsTranslate2Baidu", ReplyAction="http://tempuri.org/IDBHelper/GgpsTranslate2BaiduResponse")]
        System.Threading.Tasks.Task<string> GgpsTranslate2BaiduAsync(string lng, string lat, string flag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/GgpsTranslate2BaiduPoi", ReplyAction="http://tempuri.org/IDBHelper/GgpsTranslate2BaiduPoiResponse")]
        string GgpsTranslate2BaiduPoi(string lng, string lat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDBHelper/GgpsTranslate2BaiduPoi", ReplyAction="http://tempuri.org/IDBHelper/GgpsTranslate2BaiduPoiResponse")]
        System.Threading.Tasks.Task<string> GgpsTranslate2BaiduPoiAsync(string lng, string lat);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDBHelperChannel : _01.DBHelper.IDBHelper, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBHelperClient : System.ServiceModel.ClientBase<_01.DBHelper.IDBHelper>, _01.DBHelper.IDBHelper {
        
        public DBHelperClient() {
        }
        
        public DBHelperClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DBHelperClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBHelperClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DBHelperClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string YExecuteSql(string userid, System.DateTime starttime, System.DateTime endtime, string sql) {
            return base.Channel.YExecuteSql(userid, starttime, endtime, sql);
        }
        
        public System.Threading.Tasks.Task<string> YExecuteSqlAsync(string userid, System.DateTime starttime, System.DateTime endtime, string sql) {
            return base.Channel.YExecuteSqlAsync(userid, starttime, endtime, sql);
        }
        
        public string YExecuteHis(string userid, System.DateTime starttime, System.DateTime endtime, string sim) {
            return base.Channel.YExecuteHis(userid, starttime, endtime, sim);
        }
        
        public System.Threading.Tasks.Task<string> YExecuteHisAsync(string userid, System.DateTime starttime, System.DateTime endtime, string sim) {
            return base.Channel.YExecuteHisAsync(userid, starttime, endtime, sim);
        }
        
        public string YExecuteDBExits(System.DateTime monthtime) {
            return base.Channel.YExecuteDBExits(monthtime);
        }
        
        public System.Threading.Tasks.Task<string> YExecuteDBExitsAsync(System.DateTime monthtime) {
            return base.Channel.YExecuteDBExitsAsync(monthtime);
        }
        
        public string YExecuteReportSql(string userid, System.DateTime starttime, System.DateTime endtime, string sql, string isGeo) {
            return base.Channel.YExecuteReportSql(userid, starttime, endtime, sql, isGeo);
        }
        
        public System.Threading.Tasks.Task<string> YExecuteReportSqlAsync(string userid, System.DateTime starttime, System.DateTime endtime, string sql, string isGeo) {
            return base.Channel.YExecuteReportSqlAsync(userid, starttime, endtime, sql, isGeo);
        }
        
        public string BexecuteProc(string userid, string procName) {
            return base.Channel.BexecuteProc(userid, procName);
        }
        
        public System.Threading.Tasks.Task<string> BexecuteProcAsync(string userid, string procName) {
            return base.Channel.BexecuteProcAsync(userid, procName);
        }
        
        public string BexecuteProcNoPara(string userid, string procName) {
            return base.Channel.BexecuteProcNoPara(userid, procName);
        }
        
        public System.Threading.Tasks.Task<string> BexecuteProcNoParaAsync(string userid, string procName) {
            return base.Channel.BexecuteProcNoParaAsync(userid, procName);
        }
        
        public string BexecuteProcWithBackPara(string userid, string procName) {
            return base.Channel.BexecuteProcWithBackPara(userid, procName);
        }
        
        public System.Threading.Tasks.Task<string> BexecuteProcWithBackParaAsync(string userid, string procName) {
            return base.Channel.BexecuteProcWithBackParaAsync(userid, procName);
        }
        
        public string BInsertTransDetailProc(string userid, string procName, string xmlStr) {
            return base.Channel.BInsertTransDetailProc(userid, procName, xmlStr);
        }
        
        public System.Threading.Tasks.Task<string> BInsertTransDetailProcAsync(string userid, string procName, string xmlStr) {
            return base.Channel.BInsertTransDetailProcAsync(userid, procName, xmlStr);
        }
        
        public string testGetTableProc() {
            return base.Channel.testGetTableProc();
        }
        
        public System.Threading.Tasks.Task<string> testGetTableProcAsync() {
            return base.Channel.testGetTableProcAsync();
        }
        
        public string BexcuteSql(string userid, string sql) {
            return base.Channel.BexcuteSql(userid, sql);
        }
        
        public System.Threading.Tasks.Task<string> BexcuteSqlAsync(string userid, string sql) {
            return base.Channel.BexcuteSqlAsync(userid, sql);
        }
        
        public string BgetAllVehicleWithRight(string userid) {
            return base.Channel.BgetAllVehicleWithRight(userid);
        }
        
        public System.Threading.Tasks.Task<string> BgetAllVehicleWithRightAsync(string userid) {
            return base.Channel.BgetAllVehicleWithRightAsync(userid);
        }
        
        public string BgetTreeVehicleWithRight(string userid) {
            return base.Channel.BgetTreeVehicleWithRight(userid);
        }
        
        public System.Threading.Tasks.Task<string> BgetTreeVehicleWithRightAsync(string userid) {
            return base.Channel.BgetTreeVehicleWithRightAsync(userid);
        }
        
        public string BInsertIntoMsgGroup(string GroupNum_In, string GroupName_In, string GroupFounder_In, string FMemo_In) {
            return base.Channel.BInsertIntoMsgGroup(GroupNum_In, GroupName_In, GroupFounder_In, FMemo_In);
        }
        
        public System.Threading.Tasks.Task<string> BInsertIntoMsgGroupAsync(string GroupNum_In, string GroupName_In, string GroupFounder_In, string FMemo_In) {
            return base.Channel.BInsertIntoMsgGroupAsync(GroupNum_In, GroupName_In, GroupFounder_In, FMemo_In);
        }
        
        public string GgpsTranslate2Baidu(string lng, string lat, string flag) {
            return base.Channel.GgpsTranslate2Baidu(lng, lat, flag);
        }
        
        public System.Threading.Tasks.Task<string> GgpsTranslate2BaiduAsync(string lng, string lat, string flag) {
            return base.Channel.GgpsTranslate2BaiduAsync(lng, lat, flag);
        }
        
        public string GgpsTranslate2BaiduPoi(string lng, string lat) {
            return base.Channel.GgpsTranslate2BaiduPoi(lng, lat);
        }
        
        public System.Threading.Tasks.Task<string> GgpsTranslate2BaiduPoiAsync(string lng, string lat) {
            return base.Channel.GgpsTranslate2BaiduPoiAsync(lng, lat);
        }
    }
}
